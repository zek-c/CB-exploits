(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateOpacity = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    function checkDestroy(particle, value, minValue, maxValue) {
        switch (particle.options.opacity.animation.destroy) {
            case "max":
                if (value >= maxValue) {
                    particle.destroy();
                }
                break;
            case "min":
                if (value <= minValue) {
                    particle.destroy();
                }
                break;
        }
    }
    function updateOpacity(particle, delta) {
        const data = particle.opacity;
        if (particle.destroyed || !data?.enable || ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {
            return;
        }
        const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;
        if (!data.time) {
            data.time = 0;
        }
        if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {
            data.time += delta.value;
        }
        if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {
            return;
        }
        switch (data.status) {
            case "increasing":
                if (data.value >= maxValue) {
                    data.status = "decreasing";
                    if (!data.loops) {
                        data.loops = 0;
                    }
                    data.loops++;
                }
                else {
                    data.value += (data.velocity ?? 0) * delta.factor;
                }
                break;
            case "decreasing":
                if (data.value <= minValue) {
                    data.status = "increasing";
                    if (!data.loops) {
                        data.loops = 0;
                    }
                    data.loops++;
                }
                else {
                    data.value -= (data.velocity ?? 0) * delta.factor;
                }
                break;
        }
        if (data.velocity && data.decay !== 1) {
            data.velocity *= decay;
        }
        checkDestroy(particle, data.value, minValue, maxValue);
        if (!particle.destroyed) {
            data.value = (0, tsparticles_engine_1.clamp)(data.value, minValue, maxValue);
        }
    }
    exports.updateOpacity = updateOpacity;
});
