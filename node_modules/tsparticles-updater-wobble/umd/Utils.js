(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateWobble = void 0;
    function updateWobble(particle, delta) {
        const { wobble: wobbleOptions } = particle.options, { wobble } = particle;
        if (!wobbleOptions?.enable || !wobble) {
            return;
        }
        const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI, { position } = particle;
        wobble.angle += angleSpeed;
        if (wobble.angle > max) {
            wobble.angle -= max;
        }
        position.x += distance * Math.cos(wobble.angle);
        position.y += distance * Math.abs(Math.sin(wobble.angle));
    }
    exports.updateWobble = updateWobble;
});
